/* Will Buziak
 * cs202
 * hfllip.cpp
 * lab 2
 * read a pgm file and print the horizontal flip
 */ 

#include <iostream>
#include <vector>
using namespace std;

int main() {
    string p2;
    bool os = 1, is = 0;
    int pixel = 0, col, row, curr_val, two55, row_count = 0, j = 0, k = col - 1, i = 0;
    vector < vector < int > > position;
    vector <int> curr_col, rev_col; 

    cin >> p2;
    if (p2 != "P2") { // read and check P2 as starting word
        os = 0;
        cerr << ("Bad PGM file -- first word is not P2") << endl;
        return 0;
    }

    cin >> col;

    if (cin.fail() || col < 0) { // error check to read columns
        cerr << "Bad PGM file -- No column specification" << endl;
        os = 0;
        return 0;
    }

    cin >> row;

    if (cin.fail() || row < 0) { // error check for rows
        cerr << "Bad PGM file -- No row specification" << endl;
        os = 0;
        return 0;
    }

    cin >> two55;

    if (two55 != 255) { // error check for 255
        cerr << "Bad PGM file -- No 255 following the rows and columns" << endl;;
        os = 0;
        return 0;
    }

    position.resize(row); // resize the new picture to (row, col) elements

    while (os) {
        cin >> curr_val; // read current pixel

        if (cin.eof()) {
            os = 0;
            is = 1;
        }


        if (curr_val > 255 || curr_val < 0) { // error check for pixel to fall within 0-255
            cerr << "Bad PGM file -- pixel " << pixel << " is not a number between 0 and 255" << endl;
            os = 0;
            return 0;
        }

        if (pixel > (row * col)) { // error check size of file
            cerr << "Bad PGM file -- Extra stuff after the pixels" << endl;
            os = 0;
            return 0;
        }

        else { // track pixels and row/col
            if ((pixel % (col - 1)) == 0) {
                for (; k >= 0; k--) {
                    rev_col.push_back(curr_col[k]); // vector push back with reverse order of current vector
                }
                curr_col.clear();
                position.push_back(rev_col);
                rev_col.clear();
                row_count++;
            }
            curr_col.push_back(curr_val); // vector push back with current value
            pixel++;
        }
    }

    while (is) { // print negative PGM
        cout << "P2" << endl << col << " " << row << endl << 255 << endl;
        
        for (; i < row; i++) {
            for (; j < col; j++) {
                cout << position[i][j] << endl;
            } 
        }
        is = 0;
        return 0;
    }
}
